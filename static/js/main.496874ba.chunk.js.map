{"version":3,"sources":["connection.js","Components/card.js","App.js","serviceWorker.js","index.js"],"names":["M","Card","props","number","useState","good","setGood","useCookies","cookies","setCookie","Number","data","good_count","goodCount","killoUnit","toFixed","MillionUnit","className","src","thumbnail","onClick","window","location","href","playlist_youtube_id","name","playlist_id","fetch","url","method","body","JSON","stringify","headers","then","response","json","myJson","goodList","splice","indexOf","concat","path","App","scrollRef","createRef","urlRef","scrollPostion","setscrollPostion","item","setItem","state","setState","useEffect","result","onWheel","element","page","Math","floor","length","offset","deltaY","innerWidth","ref","style","transform","map","index","key","current","value","Boolean","hostname","match","ReactDOM","render","StrictMode","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.496874ba.chunk.js","sourcesContent":["export default \"https://youpick.p-e.kr/\";","import React,{useState, useContext} from 'react';\r\n\r\nimport {useCookies} from 'react-cookie'\r\n\r\nimport url from '../connection';\r\n\r\nconst M = 10000000;\r\nconst K = 1000;\r\n\r\nconst Card = (props)=>{\r\n\r\n  const [good,setGood] = useState(props.good);\r\n  const [cookies, setCookie] = useCookies(['goodList']);\r\n  const [goodCount, setGoodCount] = useState(Number(props.data.good_count));\r\n\r\n  const onGood = () =>{\r\n    if(good){\r\n      const data = {\r\n        playlist_id: props.data.playlist_id\r\n      };\r\n      fetch(url+'ungood',{\r\n        method: 'POST', // or 'PUT'\r\n        body: JSON.stringify(data), // data can be `string` or {object}!\r\n        headers:{\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      .then(function(response) {\r\n        return response.json();\r\n      })\r\n      .then(function(myJson) {\r\n        setGood(false);\r\n        cookies.goodList.splice(cookies.goodList.indexOf(props.data.playlist_id),1);\r\n        setCookie('goodList',cookies.goodList);\r\n      });\r\n    }else{\r\n      const data = {\r\n        playlist_id: props.data.playlist_id\r\n      };\r\n      fetch(url+'good',{\r\n        method: 'POST', // or 'PUT'\r\n        body: JSON.stringify(data), // data can be `string` or {object}!\r\n        headers:{\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      .then(function(response) {\r\n        return response.json();\r\n      })\r\n      .then(function(myJson) {\r\n        setGood(true);\r\n        setCookie('goodList',cookies.goodList.concat([props.data.playlist_id]),{path:'/'});\r\n      });\r\n    }\r\n  } \r\n  \r\n  const makeUnit = (number)=>{\r\n    if(number/M > 1){\r\n      return MillionUnit(number);\r\n    }else if(number/K > 1){\r\n      return killoUnit(number);\r\n    }else{\r\n      return number; \r\n    }\r\n  }\r\n  const killoUnit = (number) =>{\r\n    let killo = number/K;\r\n    return killo.toFixed(1)+\"K\";\r\n  }\r\n\r\n  const MillionUnit = (number) =>{\r\n    let Million = number/M;\r\n    return Million.toFixed(1)+\"M\";\r\n  }\r\n    return(\r\n        <div className=\"card\">\r\n          <div className=\"angle\">\r\n            <img className=\"thumbnail\" src={props.data.thumbnail} onClick={()=>{window.location.href= `https://music.youtube.com/playlist?list=${props.data.playlist_youtube_id}`}}/>\r\n          </div>\r\n          <div className=\"bar\">\r\n            <div className=\"decs\">\r\n              <div className=\"name\">{props.data.name}</div>\r\n              <div className=\"goodCount\">{makeUnit(goodCount)} GOOD</div>\r\n            </div>\r\n            <div className=\"right\">\r\n              <div className={`button ${(good)? \"good\" : \"\"}`} onClick={onGood}>GOOD</div>\r\n            </div>  \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, { useRef, createRef, useState, useEffect } from 'react';\nimport './App.css';\n\nimport Card from './Components/card'\n\nimport url from './connection';\n\nimport {useCookies} from 'react-cookie'\n\nconst CARD_WIDTH = 680;\n\nfunction App() {\n\n  const scrollRef = createRef()\n  const urlRef = createRef()\n\n  const [scrollPostion,setscrollPostion]= useState(0);\n  const [item,setItem] = useState([]);\n  const [state,setState] = useState(\"none\");\n\n  const [cookies, setCookie, removeCookie] = useCookies(['goodList']);\n\n  useEffect(()=>{\n    fetch(url)\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(data) {\n        if(!data.result){return;}\n        setItem(item.concat(data.result));\n      });\n      if(!cookies.goodList){\n        setCookie(\"goodList\",[])\n      }\n  },[])\n\n  const onUpload = ()=>{\n    //change url \n    const data = {\n      url:urlRef.current.value\n    }\n  \n    fetch(url+'upload',{\n      method: 'POST', // or 'PUT'\n      body: JSON.stringify(data), // data can be `string` or {object}!\n      headers:{\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(myJson) {\n        window.location.href = \"/youpick\";\n      });\n  }\n\n  return (\n    <div className=\"App\" onWheel={(element)=>{\n      let page = Math.floor(item.length/10);\n\n      const offset = scrollPostion-element.deltaY/2;\n\n      if(item.length*CARD_WIDTH - window.innerWidth < 0){return;}\n\n      if(offset <= 0 && item.length*CARD_WIDTH - window.innerWidth >= -offset){\n        setscrollPostion(offset);\n      }else if(offset >= 0){\n        setscrollPostion(0);\n      }else{\n        setscrollPostion(-item.length*CARD_WIDTH + window.innerWidth);\n      }\n\n      if(state==\"none\" && -scrollPostion-10*CARD_WIDTH*page>5*CARD_WIDTH){\n        setState(\"loading\");\n\n        fetch(url+`/?page=${page+1}`,{\n          method: 'GET', // or 'PUT'// data can be `string` or {object}!\n          headers:{\n            'Content-Type': 'application/json'\n          }\n        })\n          .then(function(response) {\n            return response.json();\n          })\n          .then(function(data) {\n            if(data.result.length==0){\n              setState(\"end\");\n              return;\n            }\n            setState(\"none\");\n            setItem(item.concat(data.result));\n          });\n      }\n    }}>\n      <div className=\"backboard\"><div className=\"band\"></div></div>\n      <div className=\"Title\"> YOU PICK <div className=\"description\">Share Your YouTube Music Playlist</div></div>\n      \n      <div ref={scrollRef} style={{transform:`translate(${scrollPostion}px,0px)`}} className=\"list\">\n        {\n          item.map((data,index)=>{\n            let good = false;\n            if(cookies.goodList.indexOf(data.playlist_id)!=-1){\n              good = true;\n            }\n            return(<Card key={index}data={data} good={good}/>)\n        })\n        }\n      </div>\n      <div className=\"bottom\">\n        <div className=\"addPlayList\">\n            <div className=\"medium\">url </div><input ref={urlRef} className=\"input_url input_box\"></input>\n            <div className=\"sumbit\" onClick={onUpload}>UPLOAD</div>\n        </div>\n        <div className=\"update\">\n          <div className=\"date\">2020.06.29</div>\n          <div className=\"list\">\n            <ul >\n              <li>add Release Note</li>\n              <li>offer count of Good</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { CookiesProvider } from 'react-cookie';\nReactDOM.render(\n  <React.StrictMode>\n    <CookiesProvider>\n      <App /> \n    </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}